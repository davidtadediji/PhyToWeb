# generated by datamodel-codegen:
#   filename:  schema.json
#   timestamp: 2024-12-14T01:49:21+00:00
from datetime import date
from datetime import datetime
from typing import List, Optional
from pydantic import BaseModel, Field, AnyUrl
from typing import Dict, Any


class CaseDetails(BaseModel):
    ocdCaseTypeId: str
    ocdCaseSubTypeId: str
    ocdWorkflowId: str
    ocdAssignerId: str
    ocdAssignedDate: datetime
    ocdAssigneeId: str
    ocdStatusId: str
    ocdActionId: str
    ocdIsEditable: bool


class Organisation(BaseModel):
    tempId: str
    organisationName: str
    acronym: Optional[str]
    organisationType: str
    mission: str
    objectives: str
    vision: str
    logo: AnyUrl
    testField: Optional[str]


class Address(BaseModel):
    tempId: str
    address1: str
    address2: Optional[str]
    address3: Optional[str]
    addressType: str
    country: str
    postalCode: str
    startDate: datetime
    endDate: datetime


class IdentifierItem(BaseModel):
    tempId: str
    identifierValue: str
    issueDate: date
    expiryDate: date
    identifierType: str
    issuedBy: str
    organisation: str


class ContactItem(BaseModel):
    tempId: str
    contactType: str
    contactValue: str
    isPrimary: bool


class ContactPersonItem(BaseModel):
    tempId: str
    firstName: str
    lastName: str
    assignedPerson: str
    address: str
    organisation: str
    role: str
    role1: Optional[str]


class ActivityItem(BaseModel):
    tempId: str
    activityName: str
    type: str
    startDate: date
    endDate: date
    description: str


class FinancialInformation(BaseModel):
    tempId: str
    dateFrom: date
    dateTo: date
    accountType: str
    amount: float
    address: str


class FormDataSchema(BaseModel):
    CaseDetails: CaseDetails
    Organisation: Organisation
    Address: List[Address]
    Identifier: List[IdentifierItem]
    Contact: List[ContactItem]
    ContactPerson: List[ContactPersonItem]
    Activity: List[ActivityItem]
    FinancialInformation: List[FinancialInformation]

class PersonalInformation(BaseModel):
    full_name: str = Field(..., description="Full name of the individual")
    NID: Optional[str] = Field(None, description="NID identifier of the individual")
    email: Optional[str] = Field(None, description="Email address of the individual")
    phone: Optional[str] = Field(None, description="Phone number of the individual")
    linkedin: Optional[str] = Field(None, description="LinkedIn profile URL")
    github: Optional[str] = Field(None, description="GitHub profile URL")
    portfolio: Optional[str] = Field(None, description="Portfolio website URL")
    address: Optional[str] = Field(None, description="Physical address of the individual")

class Education(BaseModel):
    institution: str = Field(..., description="Name of the educational institution")
    degree: Optional[str] = Field(None, description="Degree obtained or being pursued")
    field_of_study: Optional[str] = Field(None, description="Field of study or major")
    start_date: Optional[str] = Field(None, description="Start date of the education (YYYY-MM-DD).")
    end_date: Optional[str] = Field(None, description="End date of the education (YYYY-MM-DD).")
    description: Optional[str] = Field(None, description="Additional details about the education")

class WorkExperience(BaseModel):
    company: str = Field(..., description="Name of the company or organization")
    position: Optional[str] = Field(None, description="Job title or position held")
    start_date: Optional[str] = Field(None, description="Start date of the employment (YYYY-MM-DD).")
    end_date: Optional[str] = Field(None, description="End date of the employment (YYYY-MM-DD).")
    description: Optional[str] = Field(None, description="Description of the role and responsibilities")
    achievements: Optional[List[str]] = Field(None, description="List of key achievements in the role")

class Skill(BaseModel):
    name: str = Field(..., description="Name of the skill")
    proficiency: Optional[str] = Field(None, description="Proficiency level of the skill (e.g., Beginner, Intermediate, Advanced)")
    years_of_experience: Optional[int] = Field(None, description="Years of experience with the skill")

class Project(BaseModel):
    name: str = Field(..., description="Name of the project")
    start_date: Optional[str] = Field(None, description="Start date of the project (YYYY-MM-DD).")
    end_date: Optional[str] = Field(None, description="End date of the project (YYYY-MM-DD).")
    description: Optional[str] = Field(None, description="Description of the project")
    technologies_used: Optional[List[str]] = Field(None, description="List of technologies used in the project")
    project_url: Optional[str] = Field(None, description="URL to the project (if available)")

class Certification(BaseModel):
    name: str = Field(..., description="Name of the certification")
    issuing_organization: Optional[str] = Field(None, description="Organization that issued the certification")
    issue_date: Optional[str] = Field(None, description="Date the certification was issued (YYYY-MM-DD).")
    expiration_date: Optional[str] = Field(None, description="Expiration date of the certification (YYYY-MM-DD).")
    credential_id: Optional[str] = Field(None, description="Credential ID or number")
    credential_url: Optional[str] = Field(None, description="URL to the credential (if available)")

class Language(BaseModel):
    name: str = Field(..., description="Name of the language")
    proficiency: Optional[str] = Field(..., description="Proficiency level in the language (e.g., Native, Fluent, Advanced, Intermediate, Basic)")

class Resume(BaseModel):
    personal_information: PersonalInformation = Field(..., description="Personal details of the individual")
    education: Optional[List[Education]] = Field(None, description="List of educational qualifications")
    work_experience: Optional[List[WorkExperience]] = Field(None, description="List of work experiences")
    skills: Optional[List[Skill]] = Field(None, description="List of skills")
    projects: Optional[List[Project]] = Field(None, description="List of projects")
    certifications: Optional[List[Certification]] = Field(None, description="List of certifications")
    languages: Optional[List[Language]] = Field(None, description="List of languages spoken")

    @classmethod
    def model_json_schema(cls, *args, **kwargs) -> Dict[str, Any]:
        schema = super().model_json_schema(*args, **kwargs)
        for prop in schema.get("properties", {}).values():
            prop.pop("format", None)  # Remove the `format` attribute
        return schema


class Card(BaseModel):
    surname: Optional[str]
    firstname: Optional[str]
    date_of_birth:  Optional[str] = Field(None, description="Date of birth (YYYY-MM-DD).")
    gender:  Optional[str]
    id_number: Optional[str]
    serial_number: Optional[str]


class CompanyRegistration(BaseModel):
    company_name: Optional[str]
    company_no: Optional[str]
    category: Optional[str] = Field(None, description="Category of company either Domestic, Category 1 or Category 2 Global Business")
    Title: Optional[str] = Field(None, description="Title of Person e.g Mr, Mrs or Miss")
    id_type: Optional[str] = Field(None, description="Type of Person's ID e.g NIC, Passport No. or Company No.")
    nic_or_passport_no_or_company_no: Optional[str] = Field(None, description="The ID number of the Person")
    surname: Optional[str] = Field(None, description="Surname of the person")
    firstname: Optional[str] = Field(None, description="Firstname of the person")
    maiden_name: Optional[str] = Field(None, description="Maiden name of the person")
